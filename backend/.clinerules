# AIコード生成のルール

1. ドキュメントの参照
- コード生成前に必ず以下のドキュメントを確認すること：
  - `doc/directory_structure.md`: プロジェクトの構造と規則
  - `doc/github-branch-strategy.md`: ブランチ戦略
  - `doc/git-commit-guidelines.md`: コミットメッセージのガイドライン
- これらのドキュメントは生成AIへの重要な指示を含むため、必ず参照すること

2. コード生成時の注意事項
- コード生成前に必ず関連ドキュメントの内容を確認すること
- ディレクトリ構造に従って適切な場所にコードを生成すること
- 命名規則に従ってファイル名やパッケージ名を決定すること
- テストは対象のコードと同じディレクトリに配置すること
- インポートパスはモジュール名を基準とした相対パスを使用すること

3. ドキュメントの読み込み方法
- コード生成前に、関連するドキュメントの内容を必ず読み込むこと
- ドキュメントの内容に基づいて、適切なコード生成の判断を行うこと
- ドキュメントの内容が不明確な場合は、ユーザーに確認を求めること

# プロジェクトのルール定義

# ディレクトリ構造
- トップレベルにはコンテキスト境界ごとのディレクトリを配置
- 各コンテキストディレクトリには domain/, feature/, infrastructure/ を配置
- 共通ユーティリティは utils/ ディレクトリに配置

# 命名規則
- コンテキスト名: 小文字のスネークケース (例: health, user)
- 集約名: 小文字のスネークケース (例: user, health)
- 機能名: 小文字のスネークケース (例: create, get)

# テスト
- テストファイルは対象のコードと同じディレクトリに配置
- テストファイル名は {target}_test.go の形式
- 統合テストも同じディレクトリに配置

# インポート
- モジュール名を基準とした相対パスを使用
- 例: github.com/ttanaka/monechi2/backend/health/domain/health

# コード生成時の注意事項
- コンテキスト間の依存関係を最小限に保つ
- 各コンテキストは独立して動作可能であるべき
- 共通の機能は utils/ ディレクトリに配置
- テストは常に同じディレクトリに配置
- インポートパスは明確で一貫性のある命名を使用 